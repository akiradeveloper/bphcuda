require "bphcuda"

require_relative "common"
require_relative "performance"

### Compiler Setting ###
cxx = Bphcuda.make_default_compiler
cxx.use_real_precision("double")
cxx.optimize(2)
cxx.disable_pretty_print
cxx.disable_assertion
cxx << "-use_fast_math"
cxx << "-Xcompiler -march=i686"
#cxx << "-Xcompiler -Wall"
cxx << "-Xcompiler -mieee-fp"

dirs = [
"wallshock_x",
"shocktube_x",
"sjogreen_x",
"noh2d_xy"]

# make compile tasks
dirs.each do |d|
  cxx.make_compile_task(d)
end

# global params
devices = Devices
ss = [2]

### SHOCKTUBE ###
require_relative "shocktube_x"

ns = [500]
ms = (0..3).map { |x| 10**x }

ns.product(ms,devices).each do |n, m, backend|
  x = Shocktube.new(n, m, backend)
  task "run" do
    x.run
  end
  task "draw" do
    x.draw
  end
end

task "draw" do 
  x = Performance::Shocktube.new(500)
  x.draw(ms, devices)
end

# shocktube for only one cell
ns = [5, 50]
ms = [1000]

ns.product( ms, devices ).each do |n, m, backend|
  x = Shocktube.new(n, m, backend)
  task "run" do
    x.run
  end
end

### WALLSHOCK ###
require_relative "wallshock_x"

ns = [4000]
ms = (0..3).map { |x| 10**x }

ns.product( ms, devices ).each do |n, m, backend|
  x = Wallshock.new(n, m, backend)
  task "run" do
    x.run
  end
  task "draw" do
    x.draw
  end
end

### SJOGREEN ###
require_relative "sjogreen_x"

ns = [4000]
ms = (0..3).map { |x| 10**x }

ns.product( ms, devices ).each do |n, m, backend|
  x = Sjogreen.new(n, m, backend)
  task "run" do
    x.run
  end
  task "draw" do
    x.draw
  end
end

### NOH2 ###
require_relative "noh2d_xy"

ns = [100]
ms = [1,10,100]

ns.product( ms, devices ).each do |n, m, backend|
  x = Noh2d.new(n, m, backend)
  task "run" do
    x.run
  end
  task "draw" do
    x.draw
  end
end
